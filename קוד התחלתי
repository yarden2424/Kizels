using System.Collections.Generic;
using Pirates;
namespace MyBot
{
    public class MyBot : Pirates.IPirateBot
    {

        public void DoTurn(IPirateGame game)
        {
            int pirates = game.AllMyPirates().Count;
            int turns = 6;
            Pirate[] victims = GetVictims(game, pirates, turns);
            Location[] destinations = GetDestinations(game, pirates);
            int[] moves = GetMoves(game, pirates, turns, victims, destinations);
            Sail(game, victims, destinations, moves);


        }
        public static Pirate[] GetVictims(IPirateGame game, int pirates, int turns)
        {
            int victimsCounter = 0;
            Pirate[] victims = new Pirate[pirates];
            bool victimfound = false;
            foreach (Pirate p in game.MySoberPirates())
            {
                if (!p.IsLost && !p.HasTreasure && p.ReloadTurns == 0)
                {
                    foreach (Pirate enemy in game.EnemyPirates())
                    {
                        if (!enemy.IsLost && game.InRange(p, enemy)&&victimsCounter<turns)
                        {
                            victimsCounter++;
                            victims[p.Id] = enemy;
                            victimfound = true;
                            if (enemy.HasTreasure)
                                break;
                        }
                    }
                    if (!victimfound)
                        victims[p.Id] = null;
                }
                else
                {
                    victims[p.Id] = null;
                }
            }
            return victims;
        }



        public static Location[] GetDestinations(IPirateGame game, int pirates)
        {
            Treasure[] minTreasure = new Treasure[pirates];
            Location[] destinations = new Location[pirates];
            foreach (Pirate p in game.AllMyPirates())
            {
                if (!p.IsLost && !p.HasTreasure && game.Treasures().Count > 0)
                {
                    minTreasure[p.Id] = game.Treasures()[0];
                    foreach (Treasure t in game.Treasures())
                    {
                        if (game.Distance(p, minTreasure[p.Id]) > game.Distance(p, t))
                            minTreasure[p.Id] = t;
                    }
                    destinations[p.Id] = minTreasure[p.Id].Location;
                }
                else
                {
                    destinations[p.Id] = p.InitialLocation;
                }
            }
            return destinations;
        }
        public static int[] GetMoves(IPirateGame game, int pirates, int turns, Pirate[] victims, Location[] destinations)
        {
            const int ALLOWED_MOVES_WITH_TREASURE=1;
            int[] moves = new int[pirates];
            for (int i = 0; i < pirates; i++)
                moves[i] = 0;
            for (int i = 0; i < victims.Length; i++)
            {
                if (victims[i] != null)
                    turns--;
            }
            foreach (Pirate p in game.MyPiratesWithTreasures())
            {
                if (turns==0 || turns- ALLOWED_MOVES_WITH_TREASURE < 0)
                    break;
                moves[p.Id] = ALLOWED_MOVES_WITH_TREASURE;
                turns=turns- ALLOWED_MOVES_WITH_TREASURE;
            }

            if (game.MyPiratesWithoutTreasures().Count > 0 && game.Treasures().Count > 0)
            {
                Pirate minp = game.MyPiratesWithoutTreasures()[0];
                int minDis = 100000;
                foreach (Pirate p in game.MySoberPirates())
                {
                    if (!p.IsLost && victims[p.Id] == null && !p.HasTreasure)
                    {
                        if (game.Distance(p, destinations[p.Id]) < minDis)
                        {
                            minDis = game.Distance(p, destinations[p.Id]);
                            minp = p;
                        }
                    }
                }
                moves[minp.Id] = turns;
            }
            if (game.Treasures().Count==0)
            {
                foreach(Pirate p in game.MySoberPirates())
                {
                    if(!p.IsLost && !p.HasTreasure && victims[p.Id]==null && turns>0 && p.Location!=destinations[p.Id])
                    {
                        moves[p.Id] = 1;
                        turns--;
                    }
                }
            }
            return moves;
        }
        public static void Sail(IPirateGame game, Pirate[] victims, Location[] destinations, int[]moves)
        {
            foreach (Pirate p in game.MySoberPirates())
            {
                if(!p.IsLost)
                {
                    if (victims[p.Id] != null)
                        game.Attack(p, victims[p.Id]);
                    else
                    {
                        if(moves[p.Id]>0)
                        {
                            List<Location> possibleLocations = game.GetSailOptions(p, destinations[p.Id], moves[p.Id]);
                            game.SetSail(p, possibleLocations[0]);
                        }
                    }
                }
            }
        }
    }
}
