using System.Collections.Generic;
using Pirates;
namespace MyBot
{
    public class MyBot : Pirates.IPirateBot
    {
        static Location[] log = new Location[20];
        static Location[] logTemp = new Location[20];
        public void DoTurn(IPirateGame game)
        {
            if (game.GetTurn() == 1)
            {
                for (int i = 0; i < game.AllEnemyPirates().Count; i++)
                {
                    log[i] = new Location(-1, -1);
                    logTemp[i] = new Location(-1, -1);
                }
            }
            for (int i = 0; i < game.AllEnemyPirates().Count; i++)
            {
                if (log[i].Row == -1)
                {
                    logTemp[i].Row = -1;
                    logTemp[i].Col = -1;
                }
                else
                {
                    logTemp[i].Row = log[i].Row;
                    logTemp[i].Col = log[i].Col;
                }
                if (!game.AllEnemyPirates()[i].HasTreasure)
                {
                    log[i].Row = -1;
                    log[i].Col = -1;
                }
                else
                {
                    log[i].Row = game.AllEnemyPirates()[i].Location.Row;
                    log[i].Col = game.AllEnemyPirates()[i].Location.Col;
                }

            }
            int pirates = game.AllMyPirates().Count;
            int turns = game.GetActionsPerTurn();
            Pirate[] victims = GetVictims(game, pirates, turns, log, logTemp);
            Location[] destinations = GetDestinations(game, pirates, log, logTemp);
            int[] moves = GetMoves(game, pirates, turns, victims, destinations);
            int movesleft = game.GetActionsPerTurn(); ;
            int attackerId = -1;
            foreach (Pirate p in game.MySoberPirates())
            {
                if (!p.HasTreasure && !p.IsLost && victims[p.Id] == null && p.ReloadTurns <= 1)
                {
                    Pirate enemy = CheckForEnemyWithTreasure(game, p, victims);
                    if (enemy != null)
                    {
                        game.Debug("SPECIAL");
                        List<Location> possibleLocations = game.GetSailOptions(p, enemy, game.Distance(p, enemy) - 2);
                        game.SetSail(p, possibleLocations[0]);
                        movesleft = 4 + game.GetActionsPerTurn() - 2 - game.Distance(p, enemy);
                        attackerId = p.Id;
                        break;
                    }
                }

            }
            if (movesleft == game.GetActionsPerTurn())
                Sail(game, victims, destinations, moves);
            else
            {
                if (movesleft != 0)
                    AttackSail(game, victims, destinations, moves, movesleft, attackerId);
            }
        }

        public static Pirate[] GetVictims(IPirateGame game, int pirates, int turnsleft, Location[] log, Location[] logTemp)
        {
            Pirate[] victims = new Pirate[pirates];
            foreach (Pirate p in game.MySoberPirates())
            {
                bool victimfound = false;
                if (!p.IsLost && !p.HasTreasure && p.ReloadTurns == 0)
                {
                    foreach (Pirate enemy in game.EnemySoberPirates())
                    {
                        Location l = enemy.Location;
                        Location l2 = new Location(l.Row, l.Col);
                        if (log[enemy.Id].Row != -1 && logTemp[enemy.Id].Row != -1)
                        {
                            l2.Row = l.Row + log[enemy.Id].Row - logTemp[enemy.Id].Row;
                            l2.Col = l.Col + log[enemy.Id].Col - logTemp[enemy.Id].Col;
                        }
                        if (!enemy.IsLost && game.InRange(p, l2) && game.InRange(p, l) && turnsleft > 0 && !(game.GetOpponentName().Equals("4") && game.Distance(p, enemy) == 4))
                        {
                            turnsleft--;
                            victims[p.Id] = enemy;
                            victimfound = true;
                            if (enemy.HasTreasure)
                                break;
                        }
                    }
                    if (!victimfound)
                        victims[p.Id] = null;
                }
                else
                {
                    victims[p.Id] = null;
                }
            }
            return victims;
        }

        public static Location[] GetDestinations(IPirateGame game, int pirates, Location[]log, Location[]logTemp)
        {
            Location[] destinations = new Location[pirates];
            foreach (Pirate p in game.MyPiratesWithTreasures())
            {
                destinations[p.Id] = p.InitialLocation;
            }
            int minDis = 10000;
            Location[] locations = new Location[pirates];
            int minId = -1;
            int unloadedId = -1;
            foreach (Pirate p in game.MySoberPirates())
            {
                if (!p.HasTreasure)
                {
                    if (game.Treasures().Count == 0)
                    {
                        destinations[p.Id] = GetClosestPirateLocation(game, p, game.EnemyPiratesWithTreasures());
                        if (destinations[p.Id] == null)
                            destinations[p.Id] = GetClosestPirateLocation(game, p, game.MyPiratesWithTreasures());
                    }
                    else
                    {
                        locations[p.Id] = GetClosestPirateLocation(game, p, game.EnemyPiratesWithTreasures());
                        if (locations[p.Id] != null && game.Distance(p, locations[p.Id]) < minDis)
                        {
                            if (p.ReloadTurns <= 1)
                            {
                                minDis = game.Distance(p, locations[p.Id]);
                                minId = p.Id;
                            }
                            else
                            {
                                unloadedId = p.Id;
                            }
                        }
                        Treasure minTreasure = game.Treasures()[0];
                        foreach (Treasure t in game.Treasures())
                        {
                            if (game.Distance(p, minTreasure) > game.Distance(p, t))
                                minTreasure = t;
                        }
                        destinations[p.Id] = minTreasure.Location;
                    }
                }
            }
            if (minId != -1)
            {
                destinations[minId] = locations[minId];
            }
            else
            {
                if (unloadedId != -1)
                {
                    Pirate enemy = game.GetPirateOn(locations[unloadedId]);
                    if (enemy != null&&log[enemy.Id].Row!=-1&&logTemp[enemy.Id].Row!=-1)//just in case
                    {
                        game.Debug("SUICIDE");
                        destinations[unloadedId] = new Location(enemy.Location.Row + log[enemy.Id].Row - logTemp[enemy.Id].Row, enemy.Location.Col + log[enemy.Id].Col - logTemp[enemy.Id].Col);
                    }
                }
            }
            return destinations;
        }
        public static Location GetClosestPirateLocation(IPirateGame game, Pirate p1, List<Pirate> pirates)
        {
            if (pirates.Count > 0)
            {
                Pirate minPirate = pirates[0];
                foreach (Pirate p2 in pirates)
                {
                    if (game.Distance(p1, minPirate) > game.Distance(p1, p2))
                        minPirate = p2;
                }
                return minPirate.Location;
            }
            return null;
        }

        public static int[] GetMoves(IPirateGame game, int pirates, int turns, Pirate[] victims, Location[] destinations)
        {
            int[] moves = new int[pirates];
            for (int i = 0; i < pirates; i++)
                moves[i] = 0;

            for (int i = 0; i < victims.Length; i++)
            {
                if (victims[i] != null)
                {
                    turns--;
                }
            }

            const int ALLOWED_MOVES_WITH_TREASURE = 1;
            foreach (Pirate p in game.MyPiratesWithTreasures())
            {
                if (turns == 0 || turns - ALLOWED_MOVES_WITH_TREASURE < 0)
                    break;
                moves[p.Id] = ALLOWED_MOVES_WITH_TREASURE;
                turns = turns - ALLOWED_MOVES_WITH_TREASURE;
            }

            if (game.MyPiratesWithoutTreasures().Count > 0)
            {
                Pirate minp = game.MyPiratesWithoutTreasures()[0];
                int minDis = 10000;
                foreach (Pirate p in game.MySoberPirates())
                {
                    if (!p.IsLost && victims[p.Id] == null && !p.HasTreasure)
                    {
                        if (game.Distance(p, destinations[p.Id]) < minDis)
                        {
                            minDis = game.Distance(p, destinations[p.Id]);
                            minp = p;
                        }
                    }
                }
                moves[minp.Id] = turns;
                turns = 0;
                if (!minp.IsLost && victims[minp.Id] == null && !minp.HasTreasure && minp.TurnsToSober == 0)
                {
                    if (game.Distance(minp, destinations[minp.Id]) < moves[minp.Id])
                    {
                        int leftovers = moves[minp.Id] - game.Distance(minp, destinations[minp.Id]);
                        moves[minp.Id] = game.Distance(minp, destinations[minp.Id]);
                        foreach (Pirate p in game.MySoberPirates())
                        {
                            if (!p.IsLost && victims[p.Id] == null && !p.HasTreasure && p != minp)
                            {
                                moves[p.Id] = leftovers;
                                break;
                            }
                        }
                    }
                }
            }
            return moves;
        }

        public static void Sail(IPirateGame game, Pirate[] victims, Location[] destinations, int[] moves)
        {
            Location[] FinalDestinations = new Location[game.AllMyPirates().Count];
            int index = 0;
            foreach (Pirate p in game.MySoberPirates())
            {
                int extramoves = 0;
                if (!p.IsLost)
                {
                    if (victims[p.Id] != null)
                    {
                        game.Debug("ATTACK");
                        game.Attack(p, victims[p.Id]);
                    }
                    else
                    {
                        if (moves[p.Id] > 0)
                        {
                            int extramoves2 = 0;
                            if (!p.HasTreasure)
                                extramoves2 = extramoves;
                            int lvl2 = 0;
                            if (game.GetOpponentName().Equals("2") && game.GetTurn() > 2 && moves[p.Id] + extramoves2 != 1)
                                lvl2 = 1;
                            List<Location> possibleLocations = game.GetSailOptions(p, destinations[p.Id], moves[p.Id] + extramoves2 - lvl2);
                            int i = 0;
                            bool wait = true;
                            foreach (Location loc in possibleLocations)
                            {
                                if (!IsSomeoneThere(game, loc, FinalDestinations))
                                {
                                    wait = false;
                                    game.SetSail(p, possibleLocations[i]);
                                    extramoves = 0;
                                    FinalDestinations[index] = possibleLocations[i];
                                    index++;
                                    break;
                                }
                                i++;
                            }
                            if (wait)
                            {
                                int x = 0;
                                if (destinations[p.Id].Col == p.Location.Col && p.Location.Col + 1 != game.GetCols() && !game.IsOccupied(destinations[p.Id]))
                                {
                                    game.SetSail(p, new Location(p.Location.Row, p.Location.Col + 1));
                                    x = 1;
                                }
                                if (destinations[p.Id].Row == p.Location.Row && p.Location.Row + 1 != game.GetRows() && !game.IsOccupied(destinations[p.Id]))
                                {
                                    game.SetSail(p, new Location(p.Location.Row + 1, p.Location.Col));
                                    x = 1;
                                }
                                game.Debug("dodge - id: " + p.Id + "row: " + destinations[p.Id].Row + "col: " + destinations[p.Id].Col);
                                extramoves = extramoves + moves[p.Id] - x;
                            }

                        }
                    }
                }
            }
        }
        public static bool IsSomeoneThere(IPirateGame game, Location loc, Location[] FinalDestinations)
        {
            foreach (Location l in FinalDestinations)
            {
                if (l != null && IsSameLocation(l, loc))
                    return true;
            }
            foreach (Pirate p in game.EnemyDrunkPirates())
            {
                if (p.Location != null && IsSameLocation(p.Location, loc))
                    return true;
            }
            foreach (Pirate p in game.MyDrunkPirates())
            {
                if (p.Location != null && IsSameLocation(p.Location, loc))
                    return true;
            }
            return false;
        }
        public static bool IsSameLocation(Location l1, Location l2)
        {
            if (l1.Col == l2.Col && l1.Row == l2.Row)
                return true;
            return false;
        }
        public static Pirate CheckForEnemyWithTreasure(IPirateGame game, Pirate p, Pirate[] victims)
        {
            int D = 4 + game.GetActionsPerTurn() - 2;
            foreach (Pirate enemy in game.EnemySoberPirates())
            {
                int distance = game.Distance(p, enemy);
                if (distance <= D && distance >= 2 && enemy.HasTreasure && !IsEnemyVictim(enemy, victims))
                    return enemy;
            }
            return null;
        }
        public static bool IsEnemyVictim(Pirate enemy, Pirate[] victims)
        {
            foreach (Pirate victim in victims)
            {
                if (enemy == victim)
                    return true;
            }
            return false;
        }

        public static void AttackSail(IPirateGame game, Pirate[] victims, Location[] destinations, int[] moves, int movesleft, int attackerId)
        {
            foreach (Pirate p in game.MyPirates())
            {
                if (victims[p.Id] != null && movesleft > 0)
                {
                    game.Attack(p, victims[p.Id]);
                    movesleft--;
                    if (game.GetTurn() == 384 || game.GetTurn() == 385)
                        game.Debug("attacker: " + p.Id);
                }
            }
            foreach (Pirate p in game.MyPiratesWithTreasures())
            {
                if (moves[p.Id] > 0 && movesleft > 0)
                {
                    List<Location> possibleLocations = game.GetSailOptions(p, destinations[p.Id], moves[p.Id]);
                    game.SetSail(p, possibleLocations[0]);
                    movesleft = movesleft - moves[p.Id];
                }
            }
            foreach (Pirate p in game.MySoberPirates())
            {
                if (!p.HasTreasure && !p.IsLost && p.Id != attackerId && movesleft > 0 && victims[p.Id] == null)
                {
                    List<Location> possibleLocations = game.GetSailOptions(p, destinations[p.Id], movesleft);
                    game.SetSail(p, possibleLocations[0]);
                    break;
                }
            }
        }
    }
}
